apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: acs-deployment-check
spec:
  params:
    - name: acs_central_endpoint
      description: Secret containing the address:port tuple for ACS Central (example - rox.stackrox.io:443)
      type: string
    - name: acs_api_token
      description: Secret containing the ACS API token with CI permissions
      type: string
    - name: source_location
      description: Location of the file(s) to be scanned
      type: string
    - name: recursive-search
      description: search for files recursively in directory tree
      type: string
  results:
    - name: scan-result
  steps:
##------------------------------------------------------------------
# Rox deployment check - check deployment resource files
##------------------------------------------------------------------
    - name: rox-deployment-check
      env:
        - name: ROX_API_TOKEN
          valueFrom:
            secretKeyRef:
              key: acs_api_token
              name: $(params.acs_api_token)
        - name: ROX_CENTRAL_ENDPOINT
          valueFrom:
            secretKeyRef:
              key: acs_central_endpoint
              name: $(params.acs_central_endpoint)
      image: registry.access.redhat.com/ubi8/ubi:8.3-297
      resources: {}
      script: >-
        #!/usr/bin/env bash

        set +x

        curl -s -k -L -H "Authorization: Bearer $ROX_API_TOKEN"
        https://$ROX_CENTRAL_ENDPOINT/api/cli/download/roxctl-linux --output
        ./roxctl > /dev/null; echo "Getting roxctl"

        chmod +x ./roxctl  > /dev/null

        yum install jq -y -q

        if [[ "$(params.recursive-search)" == "true" ]]; then

          fileList=`find /files/$(params.source_location) -name '*.yaml' -o -name '*.yml'`

        else

          fileList=`ls /files/$(params.source_location)/*.y*ml`

        fi

        failTask="false"

        for file in $fileList

        do

          echo "Deployment check on file : $file"

          ./roxctl deployment check --json --insecure-skip-tls-verify -e $ROX_CENTRAL_ENDPOINT -f $file > $file.scan-result

          cat $file.scan-result | wc -c > $file.scan-result.wc

          read charCount < $file.scan-result.wc

          if test $charCount -gt 10

          then

            numberAlerts=`jq '.alerts' $file.scan-result | jq length`

            if test $numberAlerts -gt 1
            then

              echo "$numberAlerts alerts found ..."

            else

              echo "1 alert found ..."

            fi

            counter=0

            while [ $counter -lt $numberAlerts ]
            do

              jqCommandPolicyEnforcementCmd="jq --argjson index "$counter" '.alerts[\$index].policy.enforcementActions[] | select (. | contains(\"FAIL_BUILD_ENFORCEMENT\"))' $file.scan-result 2>/dev/null | wc -c > $file.scan-result.wc"

              eval $jqCommandPolicyEnforcementCmd > /dev/null

              jqCommandPolicyName="jq --argjson index "$counter" '.alerts[\$index].policy.name' $file.scan-result"

              alertPolicyName=`eval $jqCommandPolicyName` > /dev/null

              alertPolicyName=`echo "$alertPolicyName" | sed s/\"//g`

              jqCommandPolicyDescription="jq --argjson index "$counter" '.alerts[\$index].policy.description' $file.scan-result"

              alertPolicyDescription=`eval $jqCommandPolicyDescription` > /dev/null

              alertPolicyDescription=`echo "$alertPolicyDescription" | sed s/\"//g`

              jqCommandPolicyRationale="jq --argjson index "$counter" '.alerts[\$index].policy.rationale' $file.scan-result"

              alertPolicyRationale=`eval $jqCommandPolicyRationale` > /dev/null

              alertPolicyRationale=`echo "$alertPolicyRationale" | sed s/\"//g`

              jqCommandPolicyRemediation="jq --argjson index "$counter" '.alerts[\$index].policy.remediation' $file.scan-result"

              alertPolicyRemediation=`eval $jqCommandPolicyRemediation` > /dev/null

              alertPolicyRemediation=`echo "$alertPolicyRemediation" | sed s/\"//g`

              echo "  Alert policy name : $alertPolicyName"

              echo "  Description : $alertPolicyDescription"

              echo "  Rationale   : $alertPolicyRationale"

              echo "  Remediation : $alertPolicyRemediation"

              read charCount < $file.scan-result.wc

              if test $charCount -gt 2

              then

                ## Issue found is enough to stop the CI process

                failTask="true"

                echo "  -- Build will be halted --"

              else

                echo "  -- Policy violations will not stop the build process --"

              fi

              echo "  - - - - - - - - - - - - - - - - - - - - - - - - - -"

              numberViolationsCmd="jq --argjson index \"$counter\" '.alerts[\$index].violations' $file.scan-result | jq length"

              numberViolations=`eval $numberViolationsCmd` >> /dev/null

              if test $numberViolations -eq 1
              then

                echo "  1 violation found ..."

              else

                echo "  $numberViolations violations found ..."

              fi

              violationCounter=0

              while [ "$violationCounter" -lt "$numberViolations" ]
              do

                jqCommand="jq --argjson index "$counter" --argjson violationIndex "$violationCounter" '.alerts[\$index].violations[\$violationIndex].message' $file.scan-result"

                violation=`eval $jqCommand` >> /dev/null

                violation=`echo "$violation" | sed s/\"//g`

                echo "  violation : -- $violation"

                violationCounter=`expr $violationCounter + 1`

              done

              echo "-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -"

              echo ""

              counter=`expr $counter + 1`

            done

            echo "-----------------------------------------------------"

          else

            echo "  -- No errors found in this file --"

            echo ""

          fi

        done

        if [[ "$failTask" == "true" ]]; then

          echo "Setting overall result to fail"

          echo -n "fail" | tee $(results.scan-result.path) >> /dev/null

        else

          echo "Setting overall result to pass"

          echo -n "pass" | tee $(results.scan-result.path) >> /dev/null

        fi



      workingDir: /workspace
  workspaces:
  - name: files
    mountPath: /files
